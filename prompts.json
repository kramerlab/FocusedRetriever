{
  "general": {
    "ask_for_target_type_NO_IMPROVEMENT": "Given the instance types: {candidate_types}, identify which type can best answer the query:\n {query}\nDon't overthink it; prefer obvious answers. Return one type only. ",
    "ask_for_target_type": "Given several instances of these types: {candidate_types}. An instance of which type could correctly answer the query: {query}\n\nReturn nothing but the type of which the instance must be of. Think straightforwardly.",
    "DEPRECATED_ask_for_target_type_short": "Consider these categories: {candidate_types}. Which category describes best what kind of instances is queried by: {query}\n\nProvide the most straightforward solution. Return nothing but the unknown's type from the list.",
    "DEPRECATED_ask_for_target_type_longer": "The following retrieval question between the three dashes is given: --- {query} --- Additionally, specific instances of each of the following types are given: {candidate_types}. An instance of which type could most likely be an answer to the given question? Look for simple, direct solutions. Do not provide the answer itself or any explanation. Return the unknown's type from the list only. ",
    "DEPRECATED_ask_for_target_type_OLD3": "The following retrieval question between the three dashes is given: --- {query} --- The answer can be an instances of one the following types: {candidate_types}. An unknown instance of which type is suitable as an answer? Extract subject of the question first before you answer without getting distracted by further information provided in the question. Return the unknown's type, nothing else.",
    "DEPRECATED_ask_for_target_type_OLD2": "The following retrieval question between the three dashes is given: --- {query} --- It asks for one or more entites of the following types: {candidate_types}. Which type is it? Ignore additional information in the question and do not answer the question itself. Do not return anything but the type.",
    "DEPRECATED_ask_for_target_type_OLD": "The following retrieval question between the three dashes is given: --- {query} --- It asks for an entity of the following types: {candidate_types}. Return the most likely type from that list. Do answer the question itself. Do not return anything else.",
    "DEPRECATED_ask_for_target_type_WORSE": "The following statement or question between the three dashes is given: --- {query} --- It asks for an entity of one the following types: {candidate_types}. Return the type from that list that fits best. Do not return anything else.",
    "DEPRECATED_ask_for_2_target_types": "The following statement or question between the three dashes is given: --- {query} --- It asks for an entity of the following types: {candidate_types}. Return the two most likely type from that list. Do not return anything else.",
    "ask_for_constants": "User Question: {query}\n Identify relevant entities in the question to query a knowledge base. The user is asking for a {target_type}. The knowledge base includes the following entity types: {nodes_types}.\nTask: Extract specific entity instances from the question that can help locate the {target_type}. Format each entity as:\nEntity Name::Entity Type\nSeparate multiple entities with |.\nExample for a different question: ",
    "ask_for_constants_OLD": "The following user question between the three dashes is given: --- {query} --- I want to lookup entities from the question in a knowledge base. The user asks for a {target_type}. The knowledge base contains information about the following entity types: {nodes_types}. Which specific instances of these entity types are referred to in the user question that can help to find the {target_type}? For each entity, write its name, followed by two colons, followed by its entity type. Separate all entities with the character |. Here is an example for a different question: ",
    "ask_for_further_atomic_terms_OLD": "The following user question between the three dashes is given: --- {query} --- \nI want to lookup the answer in a {type_of_kb} knowledge base. The knowledge base has information about the following entity_types: {nodes_to_consider}. The answer to the user question is the target variable ?1: {target_type}. Which further entities are mentioned in the given question? For each entity write its name, followed by two colons and its entity type. If the entity is part of the question but unknown, write an enumerated question mark followed by its entity type. Separate all entities by commas. Here is an example for a different question: ",
    "ask_for_triplets_OLD": "The following statement or question between the three dashes is given: --- {query} --- \nI want to lookup the answer in a {type_of_kb} knowledge base. Return a comma separated sequence of 1-3 triplets (head -> relation -> tail) which describes the relationships of entities in the given question. Use these entities as heads or tails: {valid_atomics}. You are allowed to use the following relations: {edges_to_consider}. But they must be compatible to the entity type of the triplet head and the entity type of the triplet tail. Skip triplets where relation and entity types are not matching. It is important that ?1:{target_type} is included, since it denotes the answer to the question. Here is an example for a different user question: ",
    "ask_for_triplets": "Given, the query:\n{query}\nReturn a short sequence of triplets describing the main relationships in that query. Format triplets as: Head -> Relation -> Tail. Separate triplets with | . Use the variable ?1::{target_type} to represent the final answer of the query, and connect it to the following constants as Heads or Tails. Constants:\n{valid_atomics}\nIn rare, necessary cases, to bridge between the target variable and a constant, you are allowed to introduce auxiliary variables meaningfully. An auxiliary variable is formated as an enumerated question mark, followed by two colons and its entity type. Allowed entity types:\n{nodes_to_consider}\nAllowed relations:\n{edges_to_consider}\nThe entity type of both the triplet's Head and the triplet's Tail must be compatible with the relation. Example for a different query:",
    "ask_for_triplets_NEU": "The following information is given:\nquery q: {query}\nconstants C: {valid_atomics}\nallowed relations:\n{edges_to_consider}\nallowed entity types:{nodes_to_consider}\nThe target variable ?1::{target_type} represents the searched entity in q. Form q, extract relations of ?1::{target_type} to the constants C and print the relations as a short sequence of triplets of the format: Head -> Relation -> Tail. Separate triplets with | . In rare, necessary cases, to bridge between the target variable and a constant, you are allowed to introduce auxiliary variables meaningfully. An auxiliary variable is formated as an enumerated question mark, followed by two colons and its entity type. The entity type of both the triplet's Head and the triplet's Tail must be compatible with the relation. Example for a different query:",
    "ask_for_triplets_OLD": "The following user question between the three dashes is given: --- {query} --- Return a sequence of a few triplets (head -> relation -> tail) which describes the relationships of entities in the given question. Separate triplets by the character | . As heads or tails, use the variable ?1::{target_type} that denotes the answer to the user question and connect it to these constants: {valid_atomics}. In rare, necessary cases, to bridge between the target variable and a constant, you are allowed to use auxiliary variables in a meaningful way by writing an enumerated question mark followed by two colons and its entity type. The available entity types are: {nodes_to_consider}. You are allowed to use the following relations only: {edges_to_consider}. Only choose relations from that list. The entity type of the triplet head and the entity type of the triplet tail must be compatible with the relation. Here is an example for a different user question: ",
    "ask_for_triplets_TMP": "Given, the query:\n{query}\nReturn a sequence of a few triplets describing entity relationships in that query. Format triplets as: Head -> Relation -> Tail. Separate triplets with |. Use ?1::{target_type} as the target variable for the answer. Use the triplets to connect it to accepted constants. Accepted constants:\n{valid_atomics} (only choose from this list)\nIf necessary, introduce further auxiliary variables (?X::{entity_type}) meaningfully, where x is a consecutive number denoting different variables.\nAvailable entity types: {nodes_to_consider}\nAllowed relations:\n{edges_to_consider} (only choose from this list)\nEnsure head and tail types are compatible with the relation. Example for a different question:",
    "llm_activation": "Given the context:\n\"{query}\",\nidentify which entities from the {type_of_kb} database best match \"{target_name}\".\n\nEntities: {node_descriptions}\n\nReturn the ENTITY_IDs of all matching entities only, separated by commas. Unrelated example:\n0,1,5",
    "llm_activation_OLD": "Determine from the following list of entities from a {type_of_kb} database those entities that might match an entity from a query. The query is: \"{query}\". The searched entity from that query is \"{target_name}\".\n{node_descriptions}\nReturn the numbers in front of all entities that can match the searched entity in the query, separated by commas, e.g.: 0,1,5'"
  },
  "prime": {
    "ask_for_further_atomic_terms_example": "headache::effect/phenotype | osteogenesis imperfecta::disease | 9-phenanthrol::exposure",
    "ask_for_triplets_example": "'headache'::effect/phenotype -> 'is_phenotype_of_disease' -> ?1::disease | '9-phenanthrol'::exposure -> 'exposure_is_linked_to_disease' -> ?1::disease"
  },
  "mag": {
    "ask_for_further_atomic_terms_example": "hemingway::author | simson university bonn::institution",
    "ask_for_triplets_example": "?1::paper -> 'paper_cites_paper' -> ?2::paper | 'hemingway'::author -> 'author_writes_paper' -> ?2::paper"
  },
  "amazon": {
    "ask_for_further_atomic_terms_example": "x5 chair basic::product | sky blue::color",
    "ask_for_triplets_example": "?1::product -> 'product_also_buy_product' -> ?2::product | ?2::product -> 'product_has_brand' -> 'samsons ltd.'::brand"
  }
}